import { groth16 } from 'snarkjs';

/**
 * Verify a Groth16 proof
 * @param {Object} proof - The proof object
 * @param {string[]} publicSignals - The public signals
 * @param {string} verificationKey - The verification key
 * @returns {Promise<boolean>} - Whether the proof is valid
 */
export async function verifyProof(proof, publicSignals, verificationKey) {
  try {
    const result = await groth16.verify(verificationKey, publicSignals, proof);
    return result;
  } catch (error) {
    console.error('Proof verification error:', error);
    return false;
  }
}

/**
 * Verify an income proof
 * @param {Object} proof - The proof object
 * @param {string[]} publicSignals - The public signals
 * @returns {Promise<boolean>} - Whether the proof is valid
 */
export async function verifyIncomeProof(proof, publicSignals) {
  // TODO: Load verification key from file
  const verificationKey = {
    // This is a placeholder. In production, load from a file
    protocol: 'groth16',
    curve: 'bn128',
    nPublic: 1,
    vk_alpha_1: [
      '20491192805390485299153009773594534940189261866228447918068658471970481763042',
      '9383485363053290200918347156157836566562967994039712273449902621266178545958',
      '1'
    ],
    vk_beta_2: [
      ['6375614341684600155845644968847573141246072689131339440006907559637350924051',
        '4252822878758300859123897981450591353533073419317774709633173384342278351640'],
      ['10505242626370262277552901082094356697409835680227390969251493117889320475500',
        '21847035105528745403288232691147584728191162732299865338377159692350059136679'],
      ['1', '0']
    ],
    vk_gamma_2: [
      ['10857046999023057135944570762232829481370756359578518086990519993285655852781',
        '11559732032986387107991004021392285783925812861821192530917403151452391805634'],
      ['8495653923123431417604973247489272438418190587263600148770280649306958101930',
        '4082367875863433681332203403145435568316851327593401208105741076214120093531'],
      ['1', '0']
    ],
    vk_delta_2: [
      ['10857046999023057135944570762232829481370756359578518086990519993285655852781',
        '11559732032986387107991004021392285783925812861821192530917403151452391805634'],
      ['8495653923123431417604973247489272438418190587263600148770280649306958101930',
        '4082367875863433681332203403145435568316851327593401208105741076214120093531'],
      ['1', '0']
    ],
    vk_alphabeta_12: [
      [
        ['2029413683389138792403550203267699914886160938906632433982220835551125967885',
          '21072700047562757817161031222997517981543347628379360635925549008442030252106'],
        ['5940354580057074848093997053800688593151776383234237614307182854547024378036',
          '12156638873931618554171829126792193045421052652279363021382169897324752428276'],
        ['7898200236363043047017881473051765456194417247302426954204807184782243986693',
          '7074218545237549455313236346927434013100842096812539264420499035217050630853']
      ],
      [
        ['7077479683546002997211712695946002074877511277312570035766170199895071832130',
          '10093483419865920389913245021038182291233451549023025029345272315122149756109'],
        ['4595479056700221319381530156280926371456704509942304414423590385166031118820',
          '19831328484489333784475432780421641293929726139240675179672856274388269393268'],
        ['11934129596455521040620786944827826205713621633706285934057045369193958244500',
          '8037395052364110730298837004334506829870972346962140206007064471173334027475']
      ]
    ],
    IC: [
      ['2029413683389138792403550203267699914886160938906632433982220835551125967885',
        '21072700047562757817161031222997517981543347628379360635925549008442030252106',
        '1'],
      ['5940354580057074848093997053800688593151776383234237614307182854547024378036',
        '12156638873931618554171829126792193045421052652279363021382169897324752428276',
        '1']
    ]
  };

  return verifyProof(proof, publicSignals, verificationKey);
}

/**
 * Verify a rental history proof
 * @param {Object} proof - The proof object
 * @param {string[]} publicSignals - The public signals
 * @returns {Promise<boolean>} - Whether the proof is valid
 */
export async function verifyRentalHistoryProof(proof, publicSignals) {
  // TODO: Load verification key from file
  const verificationKey = {
    // This is a placeholder. In production, load from a file
    protocol: 'groth16',
    curve: 'bn128',
    nPublic: 1,
    vk_alpha_1: [
      '20491192805390485299153009773594534940189261866228447918068658471970481763042',
      '9383485363053290200918347156157836566562967994039712273449902621266178545958',
      '1'
    ],
    vk_beta_2: [
      ['6375614341684600155845644968847573141246072689131339440006907559637350924051',
        '4252822878758300859123897981450591353533073419317774709633173384342278351640'],
      ['10505242626370262277552901082094356697409835680227390969251493117889320475500',
        '21847035105528745403288232691147584728191162732299865338377159692350059136679'],
      ['1', '0']
    ],
    vk_gamma_2: [
      ['10857046999023057135944570762232829481370756359578518086990519993285655852781',
        '11559732032986387107991004021392285783925812861821192530917403151452391805634'],
      ['8495653923123431417604973247489272438418190587263600148770280649306958101930',
        '4082367875863433681332203403145435568316851327593401208105741076214120093531'],
      ['1', '0']
    ],
    vk_delta_2: [
      ['10857046999023057135944570762232829481370756359578518086990519993285655852781',
        '11559732032986387107991004021392285783925812861821192530917403151452391805634'],
      ['8495653923123431417604973247489272438418190587263600148770280649306958101930',
        '4082367875863433681332203403145435568316851327593401208105741076214120093531'],
      ['1', '0']
    ],
    vk_alphabeta_12: [
      [
        ['2029413683389138792403550203267699914886160938906632433982220835551125967885',
          '21072700047562757817161031222997517981543347628379360635925549008442030252106'],
        ['5940354580057074848093997053800688593151776383234237614307182854547024378036',
          '12156638873931618554171829126792193045421052652279363021382169897324752428276'],
        ['7898200236363043047017881473051765456194417247302426954204807184782243986693',
          '7074218545237549455313236346927434013100842096812539264420499035217050630853']
      ],
      [
        ['7077479683546002997211712695946002074877511277312570035766170199895071832130',
          '10093483419865920389913245021038182291233451549023025029345272315122149756109'],
        ['4595479056700221319381530156280926371456704509942304414423590385166031118820',
          '19831328484489333784475432780421641293929726139240675179672856274388269393268'],
        ['11934129596455521040620786944827826205713621633706285934057045369193958244500',
          '8037395052364110730298837004334506829870972346962140206007064471173334027475']
      ]
    ],
    IC: [
      ['2029413683389138792403550203267699914886160938906632433982220835551125967885',
        '21072700047562757817161031222997517981543347628379360635925549008442030252106',
        '1'],
      ['5940354580057074848093997053800688593151776383234237614307182854547024378036',
        '12156638873931618554171829126792193045421052652279363021382169897324752428276',
        '1']
    ]
  };

  return verifyProof(proof, publicSignals, verificationKey);
} 